<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>Which: WhichStack Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>WhichStack Class Reference</h1><!-- doxytag: class="WhichStack" --><code>#include &lt;WhichStack.h&gt;</code>
<p>

<p>
<a href="class_which_stack-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#040cb3fd18652b932442865486bf8c99">WhichStack</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#1f9519d1f56a44d3567660f743eeb9dc">WhichStack</a> (int maxSize)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#e73a772df47199f36095c97a64b43056">~WhichStack</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#2a86298424b17599c25c3e1499dcaee8">create</a> (<a class="el" href="class_data.html">Data</a> *data, int type, float alpha=1, float beta=1, float gamma=1)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#8f739d30839992275c72fb7c374b8ca2">push</a> (<a class="el" href="class_rule.html">Rule</a> *r)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#2e3f481005580876cc2de65fcbc7961f">select</a> (int count=2000, int check=200, float improve=0.2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#5f51fdbf5c18e14591a0877f0fac8168">pickTwo</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#a40b3e52737af7c2dfc6afb1e8f785b8">size</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#2f36675a80f41d3fd847a67645f0917f">getBest</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#8dcb6f1aa38e9e38bab202c699334378">getRule</a> (int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#fcaa85b0d6a98bb05371b37211bf46da">report</a> (std::ostream &amp;stream, int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#0679d5088732b87c05b6d70492734264">print</a> (std::ostream &amp;stream)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#6489dea58299a9327005dec0ade75ed7">push</a> (int[] attVal, float(*scoreFcn)(<a class="el" href="class_rule.html">Rule</a> *))</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#4ecfc1c6d3adbb3b01aa04d563b7ccc2">contains</a> (<a class="el" href="class_rule.html">Rule</a> *r)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_which_stack.html#09536618baf2fb9f35e2eef178120617">pick</a> (std::vector&lt; float &gt; scores, float sum)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Represents a Which-specific stack. It is sorted and has special facilities geared towards Which. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="040cb3fd18652b932442865486bf8c99"></a><!-- doxytag: member="WhichStack::WhichStack" ref="040cb3fd18652b932442865486bf8c99" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">WhichStack::WhichStack           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Empty Constructor. 
</div>
</div><p>
<a class="anchor" name="1f9519d1f56a44d3567660f743eeb9dc"></a><!-- doxytag: member="WhichStack::WhichStack" ref="1f9519d1f56a44d3567660f743eeb9dc" args="(int maxSize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">WhichStack::WhichStack           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>maxSize</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates a <a class="el" href="class_which_stack.html">WhichStack</a> that has a maximum size. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>maxSize</em>&nbsp;</td><td>The maximum size this <a class="el" href="class_which_stack.html">WhichStack</a> can be. If it is -1, the size if infinite. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="e73a772df47199f36095c97a64b43056"></a><!-- doxytag: member="WhichStack::~WhichStack" ref="e73a772df47199f36095c97a64b43056" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">WhichStack::~WhichStack           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="2a86298424b17599c25c3e1499dcaee8"></a><!-- doxytag: member="WhichStack::create" ref="2a86298424b17599c25c3e1499dcaee8" args="(Data *data, int type, float alpha=1, float beta=1, float gamma=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WhichStack::create           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>alpha</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>beta</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>gamma</em> = <code>1</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates a <a class="el" href="class_which_stack.html">WhichStack</a> having Rules of single attribute-value pairs. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>The data file to use to create the Rules from. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The type of Rules to create. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>alpha</em>&nbsp;</td><td>The weight for pd. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>beta</em>&nbsp;</td><td>The weight of pf. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gamma</em>&nbsp;</td><td>The weight for effort. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="8f739d30839992275c72fb7c374b8ca2"></a><!-- doxytag: member="WhichStack::push" ref="8f739d30839992275c72fb7c374b8ca2" args="(Rule *r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WhichStack::push           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td>
          <td class="paramname"> <em>r</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Pushes a <a class="el" href="class_rule.html">Rule</a> onto the <a class="el" href="class_which_stack.html">WhichStack</a> in the position based on the Rule's score. If the <a class="el" href="class_rule.html">Rule</a> would be last on a <a class="el" href="class_which_stack.html">WhichStack</a> of finite size that is full, the item will not be pushed. --- THE RULE WILL NOT BE DELETED IF IT IS NOT ADDED --- <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>The <a class="el" href="class_rule.html">Rule</a> to push onto the <a class="el" href="class_which_stack.html">WhichStack</a>. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the <a class="el" href="class_rule.html">Rule</a> made it onto the <a class="el" href="class_which_stack.html">WhichStack</a>, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="2e3f481005580876cc2de65fcbc7961f"></a><!-- doxytag: member="WhichStack::select" ref="2e3f481005580876cc2de65fcbc7961f" args="(int count=2000, int check=200, float improve=0.2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int WhichStack::select           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>count</em> = <code>2000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>check</em> = <code>200</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>improve</em> = <code>0.2</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calls pickTwo a series of times to attempt to create a "best" Rules. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>count</em>&nbsp;</td><td>The number of times to call PickTwo total. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>check</em>&nbsp;</td><td>How many pickTwo calls to allow to pass before a check is made to make sure improvement is still happening. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>improve</em>&nbsp;</td><td>A decimal number representing the percentage of increase in score a current "best" <a class="el" href="class_rule.html">Rule</a> must have since the last check in order to continue calling pickTwo. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The true number of times pickTwo was called. A number &lt;= count. </dd></dl>

</div>
</div><p>
<a class="anchor" name="5f51fdbf5c18e14591a0877f0fac8168"></a><!-- doxytag: member="WhichStack::pickTwo" ref="5f51fdbf5c18e14591a0877f0fac8168" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WhichStack::pickTwo           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Based on a weighted distribution, picks two Rules from the <a class="el" href="class_which_stack.html">WhichStack</a> and combines them. <dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the new <a class="el" href="class_rule.html">Rule</a> made it onto the <a class="el" href="class_which_stack.html">WhichStack</a>, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="a40b3e52737af7c2dfc6afb1e8f785b8"></a><!-- doxytag: member="WhichStack::size" ref="a40b3e52737af7c2dfc6afb1e8f785b8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int WhichStack::size           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the number of Rules in the <a class="el" href="class_which_stack.html">WhichStack</a>. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The number of Rules in the <a class="el" href="class_which_stack.html">WhichStack</a>. </dd></dl>

</div>
</div><p>
<a class="anchor" name="2f36675a80f41d3fd847a67645f0917f"></a><!-- doxytag: member="WhichStack::getBest" ref="2f36675a80f41d3fd847a67645f0917f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_rule.html">Rule</a> * WhichStack::getBest           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the best <a class="el" href="class_rule.html">Rule</a> in the <a class="el" href="class_which_stack.html">WhichStack</a>. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The top of the <a class="el" href="class_which_stack.html">WhichStack</a>. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8dcb6f1aa38e9e38bab202c699334378"></a><!-- doxytag: member="WhichStack::getRule" ref="8dcb6f1aa38e9e38bab202c699334378" args="(int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_rule.html">Rule</a> * WhichStack::getRule           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the <a class="el" href="class_rule.html">Rule</a> indexed by index. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>The index of the <a class="el" href="class_rule.html">Rule</a> to get( 0 is the same as calling <a class="el" href="class_which_stack.html#2f36675a80f41d3fd847a67645f0917f">getBest()</a> ); </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The <a class="el" href="class_rule.html">Rule</a> at index index. </dd></dl>

</div>
</div><p>
<a class="anchor" name="fcaa85b0d6a98bb05371b37211bf46da"></a><!-- doxytag: member="WhichStack::report" ref="fcaa85b0d6a98bb05371b37211bf46da" args="(std::ostream &amp;stream, int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; WhichStack::report           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Prints the first n Rules in the <a class="el" href="class_which_stack.html">WhichStack</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stream</em>&nbsp;</td><td>The stream to print to. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>The number of Rules to print. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The stream; </dd></dl>

</div>
</div><p>
<a class="anchor" name="0679d5088732b87c05b6d70492734264"></a><!-- doxytag: member="WhichStack::print" ref="0679d5088732b87c05b6d70492734264" args="(std::ostream &amp;stream)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WhichStack::print           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Outputs the <a class="el" href="class_which_stack.html">WhichStack</a> to a stream. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stream</em>&nbsp;</td><td>The stream to output to. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="6489dea58299a9327005dec0ade75ed7"></a><!-- doxytag: member="WhichStack::push" ref="6489dea58299a9327005dec0ade75ed7" args="(int[] attVal, float(*scoreFcn)(Rule *))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WhichStack::push           </td>
          <td>(</td>
          <td class="paramtype">int[]&nbsp;</td>
          <td class="paramname"> <em>attVal</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float(*)(<a class="el" href="class_rule.html">Rule</a> *)&nbsp;</td>
          <td class="paramname"> <em>scoreFcn</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This is a special method for using the <a class="el" href="class_which_stack.html">WhichStack</a> as an API. This allows a user to push items in isolation into the WhickStack, much like the standard construction does. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attVal</em>&nbsp;</td><td>A length 1x2 array that stores an attribute index and its value index to be added to the <a class="el" href="class_which_stack.html">WhichStack</a>. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>scoreFcn</em>&nbsp;</td><td>A pointer to the method of evaluating a <a class="el" href="class_rule.html">Rule</a>. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="4ecfc1c6d3adbb3b01aa04d563b7ccc2"></a><!-- doxytag: member="WhichStack::contains" ref="4ecfc1c6d3adbb3b01aa04d563b7ccc2" args="(Rule *r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WhichStack::contains           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td>
          <td class="paramname"> <em>r</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see if a <a class="el" href="class_rule.html">Rule</a> is already in this <a class="el" href="class_which_stack.html">WhichStack</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>The Rulet to look for. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if r is in this <a class="el" href="class_which_stack.html">WhichStack</a>, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="09536618baf2fb9f35e2eef178120617"></a><!-- doxytag: member="WhichStack::pick" ref="09536618baf2fb9f35e2eef178120617" args="(std::vector&lt; float &gt; scores, float sum)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int WhichStack::pick           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; float &gt;&nbsp;</td>
          <td class="paramname"> <em>scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>sum</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Picks a <a class="el" href="class_rule.html">Rule</a> from the <a class="el" href="class_which_stack.html">WhichStack</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>scores</em>&nbsp;</td><td>The vector of scores for the rule. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>max</em>&nbsp;</td><td>The maximum number to select. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The position in the <a class="el" href="class_which_stack.html">WhichStack</a> of the chosen rule. </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>My Documents/Zach/School/Research/Which/which/WhichStack.h<li>My Documents/Zach/School/Research/Which/which/WhichStack.cpp</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Feb 20 13:52:40 2008 for Which by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
