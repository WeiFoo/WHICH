<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>Which: Data Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Data Class Reference</h1><!-- doxytag: class="Data" --><code>#include &lt;Data.h&gt;</code>
<p>

<p>
<a href="class_data-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#f11f741cb7f587e2e495452a8905a22a">Data</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#ab31956423290f0d62dcca47ab4d16dd">~Data</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#d83d492da80cf1fc3d22dbae2923dd84">read</a> (std::string fName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#d05ef151bf6bfd12ec2acdc37497bba3">discretizeEqInt</a> (int bins, <a class="el" href="class_data.html">Data</a> *combine)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#63561e5d8d2c8721ac89ce032141f532">discretizeEqFreq</a> (int bins, <a class="el" href="class_data.html">Data</a> *combine=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#e45f3fe7f06ae0d41c560daae28ed938">subsample</a> (unsigned int desClass, float per)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#6df6c00f0b38e04d79fb86dadaf5d27a">microsample</a> (unsigned int amount)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#5c27562388d367bb6bacf975d2b3bcce">normalizeAttribute</a> (int attIndex)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="class_data.html">Data</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#cd7cae52fb960e8445bb33a333c6a62f">clone</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#0742c6d4a6451da11648f8b09c18e2f3">cover</a> (<a class="el" href="class_rule.html">Rule</a> *rule)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#13513bc0905f86548108501550e8d2b8">compareListItems</a> (ListItem l1, ListItem l2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#68fa1bfad389ab3289c7e35953b56f9a">calcLift</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#f183f387ec43b39bba8f88239d4d57d0">calcPDPFEst</a> (unsigned int LOC)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#01e246c9fcaa5ca8ba0088bb71e73b07">calcProbSupt</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#4851266df3faf8b05e81a6f0cd9b2d61">getLift</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#3bdab2ffd9ff499885c401b28e858d41">getTotLOC</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; int &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#b3aae47bac48fdbe906282cfb43696f6">getLOCs</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::vector<br>
&lt; InstanceElement * &gt; * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#d5ddb92219f2cb1ef51669d93db0d058">getInstanceSet</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#0fa282bf553626ad2f077fa8e6b768de">getNumAtts</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#78d2cc8282d29d0232e5786529a7b3f5">getNumClasses</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#0612067778e93602ce785f752d26769e">getClassIndex</a> (std::vector&lt; InstanceElement * &gt; *instance)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#44a22ec03abebdf4e8cd8aa80172597b">getNumAttVals</a> (std::string att)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#622849ce050947b293602cdf2188e95c">getAttName</a> (int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#bc3a0487e21e226a6f819f3035c53b6e">getAttIndex</a> (std::string name)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#cdf39c2a57e36f84a0b7b38c80b26369">getAttValIndex</a> (std::string attName, std::string valName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#ab45450454abdf71d9453857d6796073">getAttValName</a> (std::string att, int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#95f47d8047987fca54c42b05841a590e">getClassName</a> (int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; int &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#667cd56b39189f57600561d0c6443c07">getClassFreqs</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const std::vector&lt; std::vector<br>
&lt; int * &gt; &gt; *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#547ec530150603748c5cd22bc4d5112d">getFrequencyTable</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#10700625afba65240b0080a26eadc3e7">printAttributes</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#4c1d8bb0ddb468365ff4e938c3cf89e0">printDataSet</a> (std::ostream &amp;stream)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#fd1b2126292b8c062b60cf52f97c9a6e">printClassDist</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#e3e4aba44c9e6fa80cf0c3894e7fd443">printInstance</a> (int inst)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#9059dd94694692e4355d3e0c26ebe7ba">printFrequencyTable</a> (std::ostream &amp;stream)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#a6ab709b9c2aa6ee2e895a98d60335fd">processAttribute</a> (std::string line)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#58429b2b3a4b057eefa5dd8bb48190ef">processInstance</a> (std::string line)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#875a59c5b213e11ab828d83f53d6b4c7">preprocessString</a> (std::string line)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_data.html#8b1e37093a4c8b712ab27a1b94ff90f7">find</a> (std::string att, std::vector&lt; std::string &gt; &amp;l)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This class represents a data file. It facilitates the structures necessary to easily get infomormation from the data. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="f11f741cb7f587e2e495452a8905a22a"></a><!-- doxytag: member="Data::Data" ref="f11f741cb7f587e2e495452a8905a22a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Data::Data           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Empty Constructor. 
</div>
</div><p>
<a class="anchor" name="ab31956423290f0d62dcca47ab4d16dd"></a><!-- doxytag: member="Data::~Data" ref="ab31956423290f0d62dcca47ab4d16dd" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Data::~Data           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="d83d492da80cf1fc3d22dbae2923dd84"></a><!-- doxytag: member="Data::read" ref="d83d492da80cf1fc3d22dbae2923dd84" args="(std::string fName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::read           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>fName</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads in the training ARFF file and creates the <a class="el" href="class_data.html">Data</a> instance. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>fName</em>&nbsp;</td><td>The name of the file to read in. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The file stream. </dd></dl>

</div>
</div><p>
<a class="anchor" name="d05ef151bf6bfd12ec2acdc37497bba3"></a><!-- doxytag: member="Data::discretizeEqInt" ref="d05ef151bf6bfd12ec2acdc37497bba3" args="(int bins, Data *combine)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::discretizeEqInt           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bins</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>combine</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will discretize the attributes that are continuous using an equal interval discretization method. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>bins</em>&nbsp;</td><td>The number of bins to use. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>combine</em>&nbsp;</td><td>Another data set to combine with this one in the discretization. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="63561e5d8d2c8721ac89ce032141f532"></a><!-- doxytag: member="Data::discretizeEqFreq" ref="63561e5d8d2c8721ac89ce032141f532" args="(int bins, Data *combine=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::discretizeEqFreq           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bins</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>combine</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will discretize the attribtues that are continous using an equal frequency discretization method. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>bins</em>&nbsp;</td><td>The number of bins to use. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>combine</em>&nbsp;</td><td>Another data set to combine with this one in the discretization. If this is null, this is ignored. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="e45f3fe7f06ae0d41c560daae28ed938"></a><!-- doxytag: member="Data::subsample" ref="e45f3fe7f06ae0d41c560daae28ed938" args="(unsigned int desClass, float per)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Data::subsample           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>desClass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>per</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will subsample the data. That is, remove instances of data that are not the desired class until the percentage of the desired class in the entire data set is met. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>desClass</em>&nbsp;</td><td>The index of the desired class. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>per</em>&nbsp;</td><td>The desired percent. If this is smaller than the percent makeup already, this method does nothing. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the set has been altered, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="6df6c00f0b38e04d79fb86dadaf5d27a"></a><!-- doxytag: member="Data::microsample" ref="6df6c00f0b38e04d79fb86dadaf5d27a" args="(unsigned int amount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::microsample           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>amount</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will microsample that data. This involves having an equal distribution of all classes and a total number of each class being equal to amount. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>amount</em>&nbsp;</td><td>The number of each class to be left in the data set. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The actual number of each class left in the data set. If amount &gt; size( class ) than it will only remove from other classes. </dd></dl>

</div>
</div><p>
<a class="anchor" name="5c27562388d367bb6bacf975d2b3bcce"></a><!-- doxytag: member="Data::normalizeAttribute" ref="5c27562388d367bb6bacf975d2b3bcce" args="(int attIndex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::normalizeAttribute           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>attIndex</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will normalize an attribute so that each value is between 0 and 1 and the greatest attribute is equal to 1. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attIndex</em>&nbsp;</td><td>The index of the attribute to normalize. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="cd7cae52fb960e8445bb33a333c6a62f"></a><!-- doxytag: member="Data::clone" ref="cd7cae52fb960e8445bb33a333c6a62f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_data.html">Data</a> * Data::clone           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates a copy of the <a class="el" href="class_data.html">Data</a> with the attributes and instance information. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The copied <a class="el" href="class_data.html">Data</a>. </dd></dl>

</div>
</div><p>
<a class="anchor" name="0742c6d4a6451da11648f8b09c18e2f3"></a><!-- doxytag: member="Data::cover" ref="0742c6d4a6451da11648f8b09c18e2f3" args="(Rule *rule)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Data::cover           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td>
          <td class="paramname"> <em>rule</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will remove all instances of data from the data set that are covered by a given rule. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rule</em>&nbsp;</td><td>The rule to check coverage. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if the set was altered, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="13513bc0905f86548108501550e8d2b8"></a><!-- doxytag: member="Data::compareListItems" ref="13513bc0905f86548108501550e8d2b8" args="(ListItem l1, ListItem l2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Data::compareListItems           </td>
          <td>(</td>
          <td class="paramtype">ListItem&nbsp;</td>
          <td class="paramname"> <em>l1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ListItem&nbsp;</td>
          <td class="paramname"> <em>l2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Compares two ListItems. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>l1</em>&nbsp;</td><td>The first ListItem. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>l2</em>&nbsp;</td><td>The second Listitem. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>0 if l1 = l2, -1 if l1 &lt; l2, or 1 if l1 &gt; l2. </dd></dl>

</div>
</div><p>
<a class="anchor" name="68fa1bfad389ab3289c7e35953b56f9a"></a><!-- doxytag: member="Data::calcLift" ref="68fa1bfad389ab3289c7e35953b56f9a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::calcLift           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates the base lift of the data. 
</div>
</div><p>
<a class="anchor" name="f183f387ec43b39bba8f88239d4d57d0"></a><!-- doxytag: member="Data::calcPDPFEst" ref="f183f387ec43b39bba8f88239d4d57d0" args="(unsigned int LOC)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::calcPDPFEst           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>LOC</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calulates the base infomation needed for Effort scoring. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>LOC</em>&nbsp;</td><td>The attribue that is the lines of code. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="01e246c9fcaa5ca8ba0088bb71e73b07"></a><!-- doxytag: member="Data::calcProbSupt" ref="01e246c9fcaa5ca8ba0088bb71e73b07" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::calcProbSupt           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates the frequency counts of each attribute-value pair. Assumes all data is discrete. Assumes only 2 ordered classes.( Best is second class ) 
</div>
</div><p>
<a class="anchor" name="4851266df3faf8b05e81a6f0cd9b2d61"></a><!-- doxytag: member="Data::getLift" ref="4851266df3faf8b05e81a6f0cd9b2d61" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Data::getLift           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the base lift of the data. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The base lift. </dd></dl>

</div>
</div><p>
<a class="anchor" name="3bdab2ffd9ff499885c401b28e858d41"></a><!-- doxytag: member="Data::getTotLOC" ref="3bdab2ffd9ff499885c401b28e858d41" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Data::getTotLOC           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the total lines of code in this data instance. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The total lines of code. </dd></dl>

</div>
</div><p>
<a class="anchor" name="b3aae47bac48fdbe906282cfb43696f6"></a><!-- doxytag: member="Data::getLOCs" ref="b3aae47bac48fdbe906282cfb43696f6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; int &gt; Data::getLOCs           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the lines of code per instance. <dl class="return" compact><dt><b>Returns:</b></dt><dd>A vector containing the lines of code per instance. </dd></dl>

</div>
</div><p>
<a class="anchor" name="d5ddb92219f2cb1ef51669d93db0d058"></a><!-- doxytag: member="Data::getInstanceSet" ref="d5ddb92219f2cb1ef51669d93db0d058" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; vector&lt; InstanceElement * &gt; * &gt; Data::getInstanceSet           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the instance set. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The instance set. </dd></dl>

</div>
</div><p>
<a class="anchor" name="0fa282bf553626ad2f077fa8e6b768de"></a><!-- doxytag: member="Data::getNumAtts" ref="0fa282bf553626ad2f077fa8e6b768de" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::getNumAtts           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the number of attributes. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The number of attributes. </dd></dl>

</div>
</div><p>
<a class="anchor" name="78d2cc8282d29d0232e5786529a7b3f5"></a><!-- doxytag: member="Data::getNumClasses" ref="78d2cc8282d29d0232e5786529a7b3f5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::getNumClasses           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the number of class values. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The number of class values. </dd></dl>

</div>
</div><p>
<a class="anchor" name="0612067778e93602ce785f752d26769e"></a><!-- doxytag: member="Data::getClassIndex" ref="0612067778e93602ce785f752d26769e" args="(std::vector&lt; InstanceElement * &gt; *instance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::getClassIndex           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; InstanceElement * &gt; *&nbsp;</td>
          <td class="paramname"> <em>instance</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the class index for a given instance. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>An</em>&nbsp;</td><td>instance of data. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The class index. </dd></dl>

</div>
</div><p>
<a class="anchor" name="44a22ec03abebdf4e8cd8aa80172597b"></a><!-- doxytag: member="Data::getNumAttVals" ref="44a22ec03abebdf4e8cd8aa80172597b" args="(std::string att)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::getNumAttVals           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>att</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the number of values for a given attribute. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>att</em>&nbsp;</td><td>The attribute. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of values for att. </dd></dl>

</div>
</div><p>
<a class="anchor" name="622849ce050947b293602cdf2188e95c"></a><!-- doxytag: member="Data::getAttName" ref="622849ce050947b293602cdf2188e95c" args="(int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string Data::getAttName           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the attribute name of the index'th attribute. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>The name to return. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The name of the attribute at index. </dd></dl>

</div>
</div><p>
<a class="anchor" name="bc3a0487e21e226a6f819f3035c53b6e"></a><!-- doxytag: member="Data::getAttIndex" ref="bc3a0487e21e226a6f819f3035c53b6e" args="(std::string name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::getAttIndex           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>name</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the index of an attribute if the string sent in matches it. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>The name of the attribute to find the index of. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The index if found, number of attributes + 1 otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="cdf39c2a57e36f84a0b7b38c80b26369"></a><!-- doxytag: member="Data::getAttValIndex" ref="cdf39c2a57e36f84a0b7b38c80b26369" args="(std::string attName, std::string valName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Data::getAttValIndex           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>attName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>valName</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the index of an attribute value if the string sent in matches it. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attName</em>&nbsp;</td><td>The name of the attribute. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>valName</em>&nbsp;</td><td>The name of the attribute value to match. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The index if found, number of attribute values + 1 otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ab45450454abdf71d9453857d6796073"></a><!-- doxytag: member="Data::getAttValName" ref="ab45450454abdf71d9453857d6796073" args="(std::string att, int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string Data::getAttValName           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>att</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>index</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the name of the attribute value at the index'th value. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>att</em>&nbsp;</td><td>The name of the attribute. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>the value to get. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The name of the attribute value at the index. </dd></dl>

</div>
</div><p>
<a class="anchor" name="95f47d8047987fca54c42b05841a590e"></a><!-- doxytag: member="Data::getClassName" ref="95f47d8047987fca54c42b05841a590e" args="(int index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string Data::getClassName           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the class name at the index'th location. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>The index of the class to get. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The class name in string form. </dd></dl>

</div>
</div><p>
<a class="anchor" name="667cd56b39189f57600561d0c6443c07"></a><!-- doxytag: member="Data::getClassFreqs" ref="667cd56b39189f57600561d0c6443c07" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; int &gt; Data::getClassFreqs           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the class frequency vector. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The class frequency vector. </dd></dl>

</div>
</div><p>
<a class="anchor" name="547ec530150603748c5cd22bc4d5112d"></a><!-- doxytag: member="Data::getFrequencyTable" ref="547ec530150603748c5cd22bc4d5112d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const vector&lt; vector&lt; int * &gt; &gt; * Data::getFrequencyTable           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the frequency count table for best^2/(best+rest) <dl class="return" compact><dt><b>Returns:</b></dt><dd>A jagged array with each 2-dimensinal access containing a length two array with the first element being the rest count and the second element being the best count of this attribute-value pair. </dd></dl>

</div>
</div><p>
<a class="anchor" name="10700625afba65240b0080a26eadc3e7"></a><!-- doxytag: member="Data::printAttributes" ref="10700625afba65240b0080a26eadc3e7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::printAttributes           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will print the attributes. 
</div>
</div><p>
<a class="anchor" name="4c1d8bb0ddb468365ff4e938c3cf89e0"></a><!-- doxytag: member="Data::printDataSet" ref="4c1d8bb0ddb468365ff4e938c3cf89e0" args="(std::ostream &amp;stream)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::printDataSet           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will print the data set. 
</div>
</div><p>
<a class="anchor" name="fd1b2126292b8c062b60cf52f97c9a6e"></a><!-- doxytag: member="Data::printClassDist" ref="fd1b2126292b8c062b60cf52f97c9a6e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::printClassDist           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method prints the class names and frequencies. 
</div>
</div><p>
<a class="anchor" name="e3e4aba44c9e6fa80cf0c3894e7fd443"></a><!-- doxytag: member="Data::printInstance" ref="e3e4aba44c9e6fa80cf0c3894e7fd443" args="(int inst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::printInstance           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>inst</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will print one instance of the data set. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inst</em>&nbsp;</td><td>The instance number to print. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="9059dd94694692e4355d3e0c26ebe7ba"></a><!-- doxytag: member="Data::printFrequencyTable" ref="9059dd94694692e4355d3e0c26ebe7ba" args="(std::ostream &amp;stream)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::printFrequencyTable           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method will print all of the attribute value best and rest frequencies. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stream</em>&nbsp;</td><td>The stream to print to. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="a6ab709b9c2aa6ee2e895a98d60335fd"></a><!-- doxytag: member="Data::processAttribute" ref="a6ab709b9c2aa6ee2e895a98d60335fd" args="(std::string line)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::processAttribute           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>line</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Processes a string of text and converts that to a new attribute with values in the mAtts and mAttVals lists. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>line</em>&nbsp;</td><td>The line of text to process. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="58429b2b3a4b057eefa5dd8bb48190ef"></a><!-- doxytag: member="Data::processInstance" ref="58429b2b3a4b057eefa5dd8bb48190ef" args="(std::string line)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Data::processInstance           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>line</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Processes a string of text and converts that to a new instance of a data set. Inserts that instance into the mInstances list. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>line</em>&nbsp;</td><td>The line of text to convert. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="875a59c5b213e11ab828d83f53d6b4c7"></a><!-- doxytag: member="Data::preprocessString" ref="875a59c5b213e11ab828d83f53d6b4c7" args="(std::string line)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string Data::preprocessString           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>line</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes any trailing whitespace from a line. Makes every letter lower case. This allows for easier matching in later stages of the program. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>line</em>&nbsp;</td><td>A line of text. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A processed line of text. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8b1e37093a4c8b712ab27a1b94ff90f7"></a><!-- doxytag: member="Data::find" ref="8b1e37093a4c8b712ab27a1b94ff90f7" args="(std::string att, std::vector&lt; std::string &gt; &amp;l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Data::find           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>att</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>l</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Attempts to find a string in a list of strings. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>att</em>&nbsp;</td><td>The string to find. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>l</em>&nbsp;</td><td>The list to search. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The index of att in l. If it is not found, returns -1. </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>My Documents/Zach/School/Research/Which/which/Data.h<li>My Documents/Zach/School/Research/Which/which/Data.cpp</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Feb 20 13:52:40 2008 for Which by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
