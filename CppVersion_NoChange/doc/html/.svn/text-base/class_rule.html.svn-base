<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>Which: Rule Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Rule Class Reference</h1><!-- doxytag: class="Rule" --><code>#include &lt;Rule.h&gt;</code>
<p>
<div class="dynheader">
Collaboration diagram for Rule:</div>
<div class="dynsection">
<center><font size="2">[<a href="graph_legend.html">legend</a>]</font></center></div>

<p>
<a href="class_rule-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#eb73d8de3bba02f37d8cab6efb645424">Rule</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#ccef6b90dd977e8d73956964dcb75b7c">Rule</a> (int attribute, int value, <a class="el" href="class_data.html">Data</a> *d, RULE_TYPE type, float(*scoreFnc)(<a class="el" href="class_rule.html">Rule</a> *)=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#92760fc705b3da696f86e42b77943c21">~Rule</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#c8a17afe63c4fa041ef6891439c9baee">getComponent</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#8d1f33bbdc154ae34a126af0368163e0">setComponent</a> (void *com)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="struct_disjunction_set.html">DisjunctionSet</a> * &gt; *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#e16ddd7187505cea81c141c0fba02fb1">getRuleSet</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#43ff682a341a03a3c3e27e2b598580ae">setData</a> (<a class="el" href="class_data.html">Data</a> *d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#37a7cb42d14cb3a5f138f68a9873c762">setWeights</a> (float alpha, float beta, float gamma)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#2148ab729c7b70110dca6014e990134b">getScore</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#33f3e06bd36631338070130c4ac8f326">getSupport</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#4b1d1b50f81c7533bb078329f2ad8c6b">getPD</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#cf7353621f4237b0ef0cbc2817defe27">getPF</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#de31f4e816e9c1c6c5272d0140a5ac6e">getEffort</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#5bd116e9c9bc5161475710e2304df75e">getSize</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#c67eceef74c6cdc7cd098bbc65acdead">clone</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#1b76f4ec5aec7b8afda63728e47ead6c">createFromFile</a> (std::string fName, <a class="el" href="class_data.html">Data</a> *d, RULE_TYPE type, float(*scoreFcn)(<a class="el" href="class_rule.html">Rule</a> *)=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#9f69084a7d9fde37af84024310d061b2">compare</a> (<a class="el" href="class_rule.html">Rule</a> *r)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#27b5854b5e5ab821fe06fc8f4472a771">isSatisfied</a> (std::vector&lt; InstanceElement * &gt; *instance)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#3c2cbee4556a09fc797d0973bd57e3b4">score</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#dc1c7829d6e1c60f709b6395a5312fd1">findAttribute</a> (int attribute)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#4381c920d53d2059fd94361e69a8e616">findAttributeValue</a> (int attribute, int value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#4d9d97bc63ca3eb3737252a8e5be2b79">hasComponent</a> (int attribute, int value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#ecabab59e8538a4bc85b6f7f1d59adaf">isEqualTo</a> (<a class="el" href="class_rule.html">Rule</a> *r)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#a66ac3f68047f34658758abcf838ce28">addComponent</a> (int attribute, int value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#e6c4e5c295f28d0aa12e94cb2c55e918">combine</a> (<a class="el" href="class_rule.html">Rule</a> *r)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#441614c0a987b05955bf08101a9e5a34">backSelect</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#446c9ec5708ea0f0d893eca650d93f0c">printGotWant</a> (std::ostream &amp;stream, <a class="el" href="class_data.html">Data</a> *eData)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#5f02ab857782c2a31fa8b8199c0f12d5">print</a> (std::ostream &amp;stream)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_rule.html#5a80e9996896ef50d762dc7277637635">printRule</a> (std::ostream &amp;stream)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Represents a <a class="el" href="class_rule.html">Rule</a> for Which. Contains a series of attributes and the ranges they can have for a rule to fire. Rules in Which are a series of conjunctions of disjunctions. EG: ( a = 3 + a = 2 )( b = 9 + b = 5 )( ... ) <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="eb73d8de3bba02f37d8cab6efb645424"></a><!-- doxytag: member="Rule::Rule" ref="eb73d8de3bba02f37d8cab6efb645424" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Rule::Rule           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates an empty <a class="el" href="class_rule.html">Rule</a>. After this constructer the <a class="el" href="class_rule.html">Rule</a> will have no attributes to fire on. 
</div>
</div><p>
<a class="anchor" name="ccef6b90dd977e8d73956964dcb75b7c"></a><!-- doxytag: member="Rule::Rule" ref="ccef6b90dd977e8d73956964dcb75b7c" args="(int attribute, int value, Data *d, RULE_TYPE type, float(*scoreFnc)(Rule *)=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Rule::Rule           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>attribute</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">RULE_TYPE&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float(*)(<a class="el" href="class_rule.html">Rule</a> *)&nbsp;</td>
          <td class="paramname"> <em>scoreFnc</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates a <a class="el" href="class_rule.html">Rule</a> with one conjunction.( if attribute = attributeValue then... ) <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attribute</em>&nbsp;</td><td>The numerical index of the attribute in the data set. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The numerical index of the attribute's value in the data set. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>d</em>&nbsp;</td><td>A pointer to the data set to score this <a class="el" href="class_rule.html">Rule</a> with. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The type of <a class="el" href="class_rule.html">Rule</a> this is. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>the</em>&nbsp;</td><td>method to use to score this rule. Only needed for type = SPECIAL </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="92760fc705b3da696f86e42b77943c21"></a><!-- doxytag: member="Rule::~Rule" ref="92760fc705b3da696f86e42b77943c21" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Rule::~Rule           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="c8a17afe63c4fa041ef6891439c9baee"></a><!-- doxytag: member="Rule::getComponent" ref="c8a17afe63c4fa041ef6891439c9baee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * Rule::getComponent           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a pointer to the user defined component. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The pointer. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8d1f33bbdc154ae34a126af0368163e0"></a><!-- doxytag: member="Rule::setComponent" ref="8d1f33bbdc154ae34a126af0368163e0" args="(void *com)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::setComponent           </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>com</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Allows the user to create a class or struct that gets coupled with a <a class="el" href="class_rule.html">Rule</a>. Using this method allows the user to set a component of the <a class="el" href="class_rule.html">Rule</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>com</em>&nbsp;</td><td>A pointer to the component in memory. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="e16ddd7187505cea81c141c0fba02fb1"></a><!-- doxytag: member="Rule::getRuleSet" ref="e16ddd7187505cea81c141c0fba02fb1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="struct_disjunction_set.html">DisjunctionSet</a> * &gt; * Rule::getRuleSet           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the <a class="el" href="class_rule.html">Rule</a> in toe form of a jagged array of integers. See DisjuctionSet to see how to use this array. <dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to the <a class="el" href="class_rule.html">Rule</a> in a jagged array from. </dd></dl>

</div>
</div><p>
<a class="anchor" name="43ff682a341a03a3c3e27e2b598580ae"></a><!-- doxytag: member="Rule::setData" ref="43ff682a341a03a3c3e27e2b598580ae" args="(Data *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::setData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>d</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Allows the user to dynamically change the <a class="el" href="class_data.html">Data</a> this <a class="el" href="class_rule.html">Rule</a> is evaluated on. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>d</em>&nbsp;</td><td>The new <a class="el" href="class_data.html">Data</a>. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="37a7cb42d14cb3a5f138f68a9873c762"></a><!-- doxytag: member="Rule::setWeights" ref="37a7cb42d14cb3a5f138f68a9873c762" args="(float alpha, float beta, float gamma)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::setWeights           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>gamma</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Allows the user to alter how the standard metrics of PD, PF, and Effort are weighted in any pre-defined scoring method that uses the above metrics. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>alpha</em>&nbsp;</td><td>The weight of PD. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>beta</em>&nbsp;</td><td>The weight of PF. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gamma</em>&nbsp;</td><td>The weight of Effort. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="2148ab729c7b70110dca6014e990134b"></a><!-- doxytag: member="Rule::getScore" ref="2148ab729c7b70110dca6014e990134b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Rule::getScore           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the current score of a <a class="el" href="class_rule.html">Rule</a>. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The score. </dd></dl>

</div>
</div><p>
<a class="anchor" name="33f3e06bd36631338070130c4ac8f326"></a><!-- doxytag: member="Rule::getSupport" ref="33f3e06bd36631338070130c4ac8f326" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Rule::getSupport           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the current support of a <a class="el" href="class_rule.html">Rule</a>. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The support. </dd></dl>

</div>
</div><p>
<a class="anchor" name="4b1d1b50f81c7533bb078329f2ad8c6b"></a><!-- doxytag: member="Rule::getPD" ref="4b1d1b50f81c7533bb078329f2ad8c6b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Rule::getPD           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the PD of a <a class="el" href="class_rule.html">Rule</a>. This value is defined for all pre-defined scoring types. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The PD. </dd></dl>

</div>
</div><p>
<a class="anchor" name="cf7353621f4237b0ef0cbc2817defe27"></a><!-- doxytag: member="Rule::getPF" ref="cf7353621f4237b0ef0cbc2817defe27" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Rule::getPF           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the PF of a <a class="el" href="class_rule.html">Rule</a>. This value is defined for all pre-defined scoring types. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The PF. </dd></dl>

</div>
</div><p>
<a class="anchor" name="de31f4e816e9c1c6c5272d0140a5ac6e"></a><!-- doxytag: member="Rule::getEffort" ref="de31f4e816e9c1c6c5272d0140a5ac6e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Rule::getEffort           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the effort of a <a class="el" href="class_rule.html">Rule</a>. This value is defined for all pre-defined scoring types. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The effort. </dd></dl>

</div>
</div><p>
<a class="anchor" name="5bd116e9c9bc5161475710e2304df75e"></a><!-- doxytag: member="Rule::getSize" ref="5bd116e9c9bc5161475710e2304df75e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Rule::getSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets the size of the <a class="el" href="class_rule.html">Rule</a> in terms of the sum of conjunctions and disjunctions. For instance: a=[1 OR 4 OR 5] AND b = [2 OR 5] has a size of 5 <dl class="return" compact><dt><b>Returns:</b></dt><dd>The size. </dd></dl>

</div>
</div><p>
<a class="anchor" name="c67eceef74c6cdc7cd098bbc65acdead"></a><!-- doxytag: member="Rule::clone" ref="c67eceef74c6cdc7cd098bbc65acdead" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_rule.html">Rule</a> * Rule::clone           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates a cloned version of this <a class="el" href="class_rule.html">Rule</a>. The new <a class="el" href="class_rule.html">Rule</a> is completely seperate of this <a class="el" href="class_rule.html">Rule</a>. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The newly cloned <a class="el" href="class_rule.html">Rule</a>. </dd></dl>

</div>
</div><p>
<a class="anchor" name="1b76f4ec5aec7b8afda63728e47ead6c"></a><!-- doxytag: member="Rule::createFromFile" ref="1b76f4ec5aec7b8afda63728e47ead6c" args="(std::string fName, Data *d, RULE_TYPE type, float(*scoreFcn)(Rule *)=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Rule::createFromFile           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>fName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">RULE_TYPE&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float(*)(<a class="el" href="class_rule.html">Rule</a> *)&nbsp;</td>
          <td class="paramname"> <em>scoreFcn</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Creates a <a class="el" href="class_rule.html">Rule</a> from reading in a file. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>fName</em>&nbsp;</td><td>The name of the file. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="class_data.html">Data</a></em>&nbsp;</td><td>The data set to score and create this <a class="el" href="class_rule.html">Rule</a> with. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The type of <a class="el" href="class_rule.html">Rule</a> this is. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>the</em>&nbsp;</td><td>method to use to score this rule. Only needed for type = SPECIAL Returns false if no <a class="el" href="class_rule.html">Rule</a> was created. True otherwise. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="9f69084a7d9fde37af84024310d061b2"></a><!-- doxytag: member="Rule::compare" ref="9f69084a7d9fde37af84024310d061b2" args="(Rule *r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Rule::compare           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td>
          <td class="paramname"> <em>r</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Compares two Rules' scores. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>The <a class="el" href="class_rule.html">Rule</a> to compare to this one. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>&gt;0 if r is greater than this <a class="el" href="class_rule.html">Rule</a>, 0 if r is equal to this <a class="el" href="class_rule.html">Rule</a>, &lt;0 if r is less than this <a class="el" href="class_rule.html">Rule</a>. </dd></dl>

</div>
</div><p>
<a class="anchor" name="27b5854b5e5ab821fe06fc8f4472a771"></a><!-- doxytag: member="Rule::isSatisfied" ref="27b5854b5e5ab821fe06fc8f4472a771" args="(std::vector&lt; InstanceElement * &gt; *instance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Rule::isSatisfied           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; InstanceElement * &gt; *&nbsp;</td>
          <td class="paramname"> <em>instance</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see if an instance of data is satisfied by this <a class="el" href="class_rule.html">Rule</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>instance</em>&nbsp;</td><td>The instance of data. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="3c2cbee4556a09fc797d0973bd57e3b4"></a><!-- doxytag: member="Rule::score" ref="3c2cbee4556a09fc797d0973bd57e3b4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::score           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Scores the <a class="el" href="class_rule.html">Rule</a> based on which type of <a class="el" href="class_rule.html">Rule</a> it is. 
</div>
</div><p>
<a class="anchor" name="dc1c7829d6e1c60f709b6395a5312fd1"></a><!-- doxytag: member="Rule::findAttribute" ref="dc1c7829d6e1c60f709b6395a5312fd1" args="(int attribute)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Rule::findAttribute           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>attribute</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see if an attribute index is already in the <a class="el" href="class_rule.html">Rule</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attribute</em>&nbsp;</td><td>The attribute index to search for. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>-1 if the attribute does not exist, the index of the attribute otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="4381c920d53d2059fd94361e69a8e616"></a><!-- doxytag: member="Rule::findAttributeValue" ref="4381c920d53d2059fd94361e69a8e616" args="(int attribute, int value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Rule::findAttributeValue           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>attribute</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see if an attribute value is already in the <a class="el" href="class_rule.html">Rule</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attribute</em>&nbsp;</td><td>The attribute whose value is to be searched for. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value of the attribute to search. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>-1 if the value is not found, the index of the value otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="4d9d97bc63ca3eb3737252a8e5be2b79"></a><!-- doxytag: member="Rule::hasComponent" ref="4d9d97bc63ca3eb3737252a8e5be2b79" args="(int attribute, int value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Rule::hasComponent           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>attribute</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see if a certain attribute value is in the <a class="el" href="class_rule.html">Rule</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>attribute</em>&nbsp;</td><td>The attribute index to check the value of. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value index of the attribute. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if it attribute = value is in this <a class="el" href="class_rule.html">Rule</a>, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ecabab59e8538a4bc85b6f7f1d59adaf"></a><!-- doxytag: member="Rule::isEqualTo" ref="ecabab59e8538a4bc85b6f7f1d59adaf" args="(Rule *r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Rule::isEqualTo           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td>
          <td class="paramname"> <em>r</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see if two Rules have the same component sets. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>The <a class="el" href="class_rule.html">Rule</a> to compare to this one. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if r == this, false otherwise. </dd></dl>

</div>
</div><p>
<a class="anchor" name="a66ac3f68047f34658758abcf838ce28"></a><!-- doxytag: member="Rule::addComponent" ref="a66ac3f68047f34658758abcf838ce28" args="(int attribute, int value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Rule::addComponent           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>attribute</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds a new component to the <a class="el" href="class_rule.html">Rule</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>atribute</em>&nbsp;</td><td>The attribute to add. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vale</em>&nbsp;</td><td>The value of the attribute to add. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if it was added, false if it already was in the rule. </dd></dl>

</div>
</div><p>
<a class="anchor" name="e6c4e5c295f28d0aa12e94cb2c55e918"></a><!-- doxytag: member="Rule::combine" ref="e6c4e5c295f28d0aa12e94cb2c55e918" args="(Rule *r)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_rule.html">Rule</a> * Rule::combine           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_rule.html">Rule</a> *&nbsp;</td>
          <td class="paramname"> <em>r</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Combines two Rules by adding together their disjunctions and conjunctions. If this <a class="el" href="class_rule.html">Rule</a> and r are equivalent, the new <a class="el" href="class_rule.html">Rule</a> is just a clone of the first rule. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>The <a class="el" href="class_rule.html">Rule</a> to add to this one. </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to a new <a class="el" href="class_rule.html">Rule</a> that is created from this one. </dd></dl>

</div>
</div><p>
<a class="anchor" name="441614c0a987b05955bf08101a9e5a34"></a><!-- doxytag: member="Rule::backSelect" ref="441614c0a987b05955bf08101a9e5a34" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_rule.html">Rule</a> * Rule::backSelect           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Attempts to create a better, smaller rule. <dl class="return" compact><dt><b>Returns:</b></dt><dd>The smaller rule. </dd></dl>

</div>
</div><p>
<a class="anchor" name="446c9ec5708ea0f0d893eca650d93f0c"></a><!-- doxytag: member="Rule::printGotWant" ref="446c9ec5708ea0f0d893eca650d93f0c" args="(std::ostream &amp;stream, Data *eData)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::printGotWant           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="class_data.html">Data</a> *&nbsp;</td>
          <td class="paramname"> <em>eData</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Prints a Weka-like got want matrix to allow for evaluation alongside the Weka. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stream</em>&nbsp;</td><td>The stream to print o. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>eData</em>&nbsp;</td><td>The data containing the proper line of code information. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="5f02ab857782c2a31fa8b8199c0f12d5"></a><!-- doxytag: member="Rule::print" ref="5f02ab857782c2a31fa8b8199c0f12d5" args="(std::ostream &amp;stream)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::print           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Prints the <a class="el" href="class_rule.html">Rule</a> in the format: A = [ 1 OR 2 ] AND B = [ 2 ] AND C = [ 1 OR 4 ] Score: ### &lt;optional scoring="" metrics&gt;=""&gt; <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stream</em>&nbsp;</td><td>The stream to print the <a class="el" href="class_rule.html">Rule</a> to. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="5a80e9996896ef50d762dc7277637635"></a><!-- doxytag: member="Rule::printRule" ref="5a80e9996896ef50d762dc7277637635" args="(std::ostream &amp;stream)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rule::printRule           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>stream</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Prints just the <a class="el" href="class_rule.html">Rule</a> portion in the format. A = [ 1 OR 2 ] AND B = [ 2 ] AND C = [ 1 OR 4 ] =&gt; class <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stream</em>&nbsp;</td><td>The stream to print tte <a class="el" href="class_rule.html">Rule</a> to. </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>My Documents/Zach/School/Research/Which/which/Rule.h<li>My Documents/Zach/School/Research/Which/which/Rule.cpp</ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Wed Feb 20 13:52:40 2008 for Which by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
